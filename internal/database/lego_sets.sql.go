// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: lego_sets.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createLegoSet = `-- name: CreateLegoSet :one
INSERT INTO lego_sets (id, serial_number, name, price, theme, year, total_parts, user_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, serial_number, name, price, theme, year, total_parts, user_id
`

type CreateLegoSetParams struct {
	ID           uuid.UUID
	SerialNumber string
	Name         string
	Price        string
	Theme        string
	Year         int32
	TotalParts   int32
	UserID       uuid.UUID
}

func (q *Queries) CreateLegoSet(ctx context.Context, arg CreateLegoSetParams) (LegoSet, error) {
	row := q.db.QueryRowContext(ctx, createLegoSet,
		arg.ID,
		arg.SerialNumber,
		arg.Name,
		arg.Price,
		arg.Theme,
		arg.Year,
		arg.TotalParts,
		arg.UserID,
	)
	var i LegoSet
	err := row.Scan(
		&i.ID,
		&i.SerialNumber,
		&i.Name,
		&i.Price,
		&i.Theme,
		&i.Year,
		&i.TotalParts,
		&i.UserID,
	)
	return i, err
}

const deleteLegoSet = `-- name: DeleteLegoSet :exec
DELETE FROM lego_sets
WHERE serial_number = $1
`

func (q *Queries) DeleteLegoSet(ctx context.Context, serialNumber string) error {
	_, err := q.db.ExecContext(ctx, deleteLegoSet, serialNumber)
	return err
}

const getLegoSetBySerial = `-- name: GetLegoSetBySerial :one
SELECT id, serial_number, name, price, theme, year, total_parts, user_id FROM lego_sets WHERE serial_number = $1
`

func (q *Queries) GetLegoSetBySerial(ctx context.Context, serialNumber string) (LegoSet, error) {
	row := q.db.QueryRowContext(ctx, getLegoSetBySerial, serialNumber)
	var i LegoSet
	err := row.Scan(
		&i.ID,
		&i.SerialNumber,
		&i.Name,
		&i.Price,
		&i.Theme,
		&i.Year,
		&i.TotalParts,
		&i.UserID,
	)
	return i, err
}

const listLegoSets = `-- name: ListLegoSets :many
SELECT id, serial_number, name, price, theme, year, total_parts, user_id FROM lego_sets ORDER BY year DESC
`

func (q *Queries) ListLegoSets(ctx context.Context) ([]LegoSet, error) {
	rows, err := q.db.QueryContext(ctx, listLegoSets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LegoSet
	for rows.Next() {
		var i LegoSet
		if err := rows.Scan(
			&i.ID,
			&i.SerialNumber,
			&i.Name,
			&i.Price,
			&i.Theme,
			&i.Year,
			&i.TotalParts,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLegoSet = `-- name: UpdateLegoSet :exec
UPDATE lego_sets
SET name = $2, price = $3, theme = $4, year = $5, total_parts = $6, user_id = $7    
WHERE serial_number = $1
`

type UpdateLegoSetParams struct {
	SerialNumber string
	Name         string
	Price        string
	Theme        string
	Year         int32
	TotalParts   int32
	UserID       uuid.UUID
}

func (q *Queries) UpdateLegoSet(ctx context.Context, arg UpdateLegoSetParams) error {
	_, err := q.db.ExecContext(ctx, updateLegoSet,
		arg.SerialNumber,
		arg.Name,
		arg.Price,
		arg.Theme,
		arg.Year,
		arg.TotalParts,
		arg.UserID,
	)
	return err
}
