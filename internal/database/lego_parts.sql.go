// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: lego_parts.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createPart = `-- name: CreatePart :one
INSERT INTO lego_parts (id, serial_number, quantity, name, color, price)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, serial_number, quantity, name, color, price
`

type CreatePartParams struct {
	ID           uuid.UUID
	SerialNumber string
	Quantity     int32
	Name         string
	Color        string
	Price        string
}

func (q *Queries) CreatePart(ctx context.Context, arg CreatePartParams) (LegoPart, error) {
	row := q.db.QueryRowContext(ctx, createPart,
		arg.ID,
		arg.SerialNumber,
		arg.Quantity,
		arg.Name,
		arg.Color,
		arg.Price,
	)
	var i LegoPart
	err := row.Scan(
		&i.ID,
		&i.SerialNumber,
		&i.Quantity,
		&i.Name,
		&i.Color,
		&i.Price,
	)
	return i, err
}

const deletePart = `-- name: DeletePart :exec
DELETE FROM lego_parts
WHERE serial_number = $1
`

func (q *Queries) DeletePart(ctx context.Context, serialNumber string) error {
	_, err := q.db.ExecContext(ctx, deletePart, serialNumber)
	return err
}

const getPartByNumber = `-- name: GetPartByNumber :one
SELECT id, serial_number, quantity, name, color, price FROM lego_parts WHERE serial_number = $1
`

func (q *Queries) GetPartByNumber(ctx context.Context, serialNumber string) (LegoPart, error) {
	row := q.db.QueryRowContext(ctx, getPartByNumber, serialNumber)
	var i LegoPart
	err := row.Scan(
		&i.ID,
		&i.SerialNumber,
		&i.Quantity,
		&i.Name,
		&i.Color,
		&i.Price,
	)
	return i, err
}

const listParts = `-- name: ListParts :many
SELECT id, serial_number, quantity, name, color, price FROM lego_parts ORDER BY name
`

func (q *Queries) ListParts(ctx context.Context) ([]LegoPart, error) {
	rows, err := q.db.QueryContext(ctx, listParts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LegoPart
	for rows.Next() {
		var i LegoPart
		if err := rows.Scan(
			&i.ID,
			&i.SerialNumber,
			&i.Quantity,
			&i.Name,
			&i.Color,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePart = `-- name: UpdatePart :exec
UPDATE lego_parts
SET quantity = $2, name = $3, color = $4, price = $5
WHERE serial_number = $1
`

type UpdatePartParams struct {
	SerialNumber string
	Quantity     int32
	Name         string
	Color        string
	Price        string
}

func (q *Queries) UpdatePart(ctx context.Context, arg UpdatePartParams) error {
	_, err := q.db.ExecContext(ctx, updatePart,
		arg.SerialNumber,
		arg.Quantity,
		arg.Name,
		arg.Color,
		arg.Price,
	)
	return err
}
