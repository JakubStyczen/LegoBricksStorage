// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user_sets.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addUserSet = `-- name: AddUserSet :one
INSERT INTO user_sets (id, user_id, set_id, price)
SELECT $1, $2, ls.id, $4
FROM lego_sets ls
WHERE ls.serial_number = $3
RETURNING id, user_id, set_id, price, owned_at
`

type AddUserSetParams struct {
	ID           uuid.UUID
	UserID       uuid.UUID
	SerialNumber string
	Price        string
}

func (q *Queries) AddUserSet(ctx context.Context, arg AddUserSetParams) (UserSet, error) {
	row := q.db.QueryRowContext(ctx, addUserSet,
		arg.ID,
		arg.UserID,
		arg.SerialNumber,
		arg.Price,
	)
	var i UserSet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SetID,
		&i.Price,
		&i.OwnedAt,
	)
	return i, err
}

const deleteUserSetBySerial = `-- name: DeleteUserSetBySerial :exec
DELETE FROM user_sets
USING users u, lego_sets ls
WHERE user_sets.user_id = u.id
  AND user_sets.set_id = ls.id
  AND u.id = $1
  AND ls.serial_number = $2
`

type DeleteUserSetBySerialParams struct {
	ID           uuid.UUID
	SerialNumber string
}

func (q *Queries) DeleteUserSetBySerial(ctx context.Context, arg DeleteUserSetBySerialParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserSetBySerial, arg.ID, arg.SerialNumber)
	return err
}

const getUserSetBySerialNumber = `-- name: GetUserSetBySerialNumber :one
SELECT us.id, us.user_id, us.set_id, us.price, us.owned_at
FROM user_sets us
JOIN lego_sets ls ON us.set_id = ls.id
JOIN users u ON us.user_id = u.id
WHERE u.id = $1 AND ls.serial_number = $2
`

type GetUserSetBySerialNumberParams struct {
	ID           uuid.UUID
	SerialNumber string
}

func (q *Queries) GetUserSetBySerialNumber(ctx context.Context, arg GetUserSetBySerialNumberParams) (UserSet, error) {
	row := q.db.QueryRowContext(ctx, getUserSetBySerialNumber, arg.ID, arg.SerialNumber)
	var i UserSet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SetID,
		&i.Price,
		&i.OwnedAt,
	)
	return i, err
}

const listUserSets = `-- name: ListUserSets :many
SELECT id, user_id, set_id, price, owned_at FROM user_sets WHERE user_id = $1 ORDER BY owned_at DESC
`

func (q *Queries) ListUserSets(ctx context.Context, userID uuid.UUID) ([]UserSet, error) {
	rows, err := q.db.QueryContext(ctx, listUserSets, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserSet
	for rows.Next() {
		var i UserSet
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.SetID,
			&i.Price,
			&i.OwnedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
