// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: lego_set_parts.sql

package database

import (
	"context"
)

const addPartToSetBySerial = `-- name: AddPartToSetBySerial :one
INSERT INTO lego_set_parts (set_serial, part_serial, quantity)
VALUES ($1, $2, $3)
ON CONFLICT (set_serial, part_serial) DO UPDATE SET quantity = EXCLUDED.quantity
RETURNING set_serial, part_serial, quantity
`

type AddPartToSetBySerialParams struct {
	SetSerial  string
	PartSerial string
	Quantity   int32
}

func (q *Queries) AddPartToSetBySerial(ctx context.Context, arg AddPartToSetBySerialParams) (LegoSetPart, error) {
	row := q.db.QueryRowContext(ctx, addPartToSetBySerial, arg.SetSerial, arg.PartSerial, arg.Quantity)
	var i LegoSetPart
	err := row.Scan(&i.SetSerial, &i.PartSerial, &i.Quantity)
	return i, err
}

const getAllPartsInAllSets = `-- name: GetAllPartsInAllSets :many
SELECT 
    lsp.set_serial,
    ls.name AS set_name,
    lsp.part_serial,
    lp.name AS part_name,
    lsp.quantity
FROM lego_set_parts lsp
JOIN lego_sets ls ON lsp.set_serial = ls.serial_number
JOIN lego_parts lp ON lsp.part_serial = lp.serial_number
ORDER BY lsp.set_serial, lsp.part_serial
`

type GetAllPartsInAllSetsRow struct {
	SetSerial  string
	SetName    string
	PartSerial string
	PartName   string
	Quantity   int32
}

func (q *Queries) GetAllPartsInAllSets(ctx context.Context) ([]GetAllPartsInAllSetsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllPartsInAllSets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPartsInAllSetsRow
	for rows.Next() {
		var i GetAllPartsInAllSetsRow
		if err := rows.Scan(
			&i.SetSerial,
			&i.SetName,
			&i.PartSerial,
			&i.PartName,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPartsOfSetBySerial = `-- name: GetPartsOfSetBySerial :many
SELECT lego_set_parts.set_serial, lego_set_parts.part_serial, lego_set_parts.quantity FROM lego_set_parts WHERE set_serial = $1
`

func (q *Queries) GetPartsOfSetBySerial(ctx context.Context, setSerial string) ([]LegoSetPart, error) {
	rows, err := q.db.QueryContext(ctx, getPartsOfSetBySerial, setSerial)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LegoSetPart
	for rows.Next() {
		var i LegoSetPart
		if err := rows.Scan(&i.SetSerial, &i.PartSerial, &i.Quantity); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removePartFromSet = `-- name: RemovePartFromSet :exec
DELETE FROM lego_set_parts
WHERE set_serial = $1 AND part_serial = $2
`

type RemovePartFromSetParams struct {
	SetSerial  string
	PartSerial string
}

func (q *Queries) RemovePartFromSet(ctx context.Context, arg RemovePartFromSetParams) error {
	_, err := q.db.ExecContext(ctx, removePartFromSet, arg.SetSerial, arg.PartSerial)
	return err
}
